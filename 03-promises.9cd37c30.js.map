{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","submit","onFormSubmit","evt","preventDefault","firstDelay","target","delay","value","step","amount","currentTarget","reset","position","createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","console","log","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,QAC9BC,EAASF,SAASC,cAAc,UAMtC,SAASE,EAAaC,GACpBA,EAAIC,iBACAC,IAAAA,EAAaF,EAAIG,OAAOC,MAAMC,MAC5BD,MAAAA,EAAQJ,EAAIG,OAAOG,KAAKD,MACxBE,EAASP,EAAIG,OAAOI,OAAOF,MAEjCL,EAAIQ,cAAcC,QAEb,IAAA,IAAIC,EAAW,EAAGA,EAAWH,EAAQG,IACxCC,EAAcD,EAAUN,GACxBF,GAAcE,EAIlB,SAASO,EAAcD,EAAUN,GACf,IAAIQ,QAAQ,CAACC,EAASC,KAC9BC,MAAAA,EAAgBC,KAAKC,SAAW,GAEtCC,WAAW,KACLH,EACFF,EAAQ,CAAEH,SAAAA,EAAUN,MAAAA,IAEpBU,EAAO,CAAEJ,SAAAA,EAAUN,MAAAA,KAEpBA,KAIFe,KAAK,EAAGT,SAAAA,EAAUN,MAAAA,MACjBgB,QAAQC,2BAA2BX,QAAeN,SAEnDkB,MAAM,EAAGZ,SAAAA,EAAUN,MAAAA,MAClBgB,QAAQC,0BAA0BX,QAAeN,SAlCvDT,EAAK4B,iBAAiB,SAAUxB","file":"03-promises.9cd37c30.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('form');\nconst submit = document.querySelector('button');\n// const DELEY = 0;\n\n// form.addEventListener('input', onFormInput);\nform.addEventListener('submit', onFormSubmit);\n// =======================================================\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  let firstDelay = evt.target.delay.value;\n  const delay = evt.target.step.value;\n  const amount = evt.target.amount.value;\n  // console.log(firstDelay, delay, amount);\n  evt.currentTarget.reset();\n  // визвемо функцію <<createPromise>>  кількість разів = amount\n  for (let position = 0; position < amount; position++) {\n    createPromise(position, delay);\n    firstDelay += delay;\n  }\n}\n// ====================================================\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Fulfill (position, delay)\n      } else {\n        reject({ position, delay }); // Reject (position, delay)\n      }\n    }, delay);\n  });\n\n  promise\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n"]}