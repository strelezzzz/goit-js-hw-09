{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","submit","onFormSubmit","evt","preventDefault","delay","parseInt","target","value","delayStep","step","amount","currentTarget","reset","position","createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","then","console","log","catch","addEventListener"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,QAC9BC,EAASF,SAASC,cAAc,UAMtC,SAASE,EAAaC,GACpBA,EAAIC,iBACAC,IAAAA,EAAQC,SAASH,EAAII,OAAOF,MAAMG,OAChCC,MAAAA,EAAYH,SAASH,EAAII,OAAOG,KAAKF,OACrCG,EAASL,SAASH,EAAII,OAAOI,OAAOH,OAE1CL,EAAIS,cAAcC,QAEb,IAAA,IAAIC,EAAW,EAAGA,EAAWH,EAAQG,IACxCC,EAAcD,EAAUT,GACxBA,GAASI,EAIb,SAASM,EAAcD,EAAUT,GACf,IAAIW,QAAQ,CAACC,EAASC,KAC9BC,MAAAA,EAAgBC,KAAKC,SAAW,GAEtCC,WAAW,KACLH,EACFF,EAAQ,CAAEH,SAAAA,EAAUT,MAAAA,IAEpBa,EAAO,CAAEJ,SAAAA,EAAUT,MAAAA,KAEpBA,KAIFkB,KAAK,EAAGT,SAAAA,EAAUT,MAAAA,MACjBmB,QAAQC,2BAA2BX,QAAeT,SAEnDqB,MAAM,EAAGZ,SAAAA,EAAUT,MAAAA,MAClBmB,QAAQC,0BAA0BX,QAAeT,SAlCvDP,EAAK6B,iBAAiB,SAAUzB","file":"03-promises.e2df0a6c.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('form');\nconst submit = document.querySelector('button');\n// const DELEY = 0;\n\n// form.addEventListener('input', onFormInput);\nform.addEventListener('submit', onFormSubmit);\n// =======================================================\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  let delay = parseInt(evt.target.delay.value);\n  const delayStep = parseInt(evt.target.step.value);\n  const amount = parseInt(evt.target.amount.value);\n  //\n  evt.currentTarget.reset();\n  // визвемо функцію <<createPromise>>  кількість разів = amount\n  for (let position = 0; position < amount; position++) {\n    createPromise(position, delay);\n    delay += delayStep;\n  }\n}\n// ====================================================\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // Fulfill (position, delay)\n      } else {\n        reject({ position, delay }); // Reject (position, delay)\n      }\n    }, delay);\n  });\n\n  promise\n    .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n}\n"]}