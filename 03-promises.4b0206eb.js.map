{"version":3,"sources":["js/03-promises.js"],"names":["form","document","querySelector","submit","onFormSubmit","evt","preventDefault","firstDelay","target","delay","value","step","amount","console","log","currentTarget","reset","setTimeout","createPromise","onFormInput","position","Promise","resolve","reject","shouldResolve","Math","random","addEventListener","then","catch"],"mappings":";AAAA,MAAMA,EAAOC,SAASC,cAAc,QAC9BC,EAASF,SAASC,cAAc,UAMtC,SAASE,EAAaC,GACpBA,EAAIC,iBACAC,IAAAA,EAAaF,EAAIG,OAAOC,MAAMC,MAC9BD,EAAQJ,EAAIG,OAAOG,KAAKD,MACxBE,EAASP,EAAIG,OAAOI,OAAOF,MAC/BG,QAAQC,IAAIP,EAAYE,EAAOG,GAC/BP,EAAIU,cAAcC,QAElBC,WAAW,KAETC,EADe,EACST,IACvBF,GAGL,SAASY,EAAYd,IAUrB,SAASa,EAAcE,EAAUX,GACxB,OAAA,IAAIY,QAAQ,CAACC,EAASC,KACrBC,MAAAA,EAAgBC,KAAKC,SAAW,GACtCT,WAAW,KACLO,EACFF,EAAQT,QAAQC,2BAA2BM,QAAeX,QAE1Dc,EAAOV,QAAQC,0BAA0BM,QAAeX,SAEzD,OApCPT,EAAK2B,iBAAiB,QAASR,GAC/BnB,EAAK2B,iBAAiB,SAAUvB,GAkBhCc,EAAc,EAAG,MACdU,KAAK,EAAGR,SAAAA,EAAUX,MAAAA,MACjBI,QAAQC,2BAA2BM,QAAeX,SAEnDoB,MAAM,EAAGT,SAAAA,EAAUX,MAAAA,MAClBI,QAAQC,0BAA0BM,QAAeX","file":"03-promises.4b0206eb.js","sourceRoot":"../src","sourcesContent":["const form = document.querySelector('form');\nconst submit = document.querySelector('button');\n// const DELEY = 0;\n\nform.addEventListener('input', onFormInput);\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  let firstDelay = evt.target.delay.value;\n  let delay = evt.target.step.value;\n  let amount = evt.target.amount.value;\n  console.log(firstDelay, delay, amount);\n  evt.currentTarget.reset();\n\n  setTimeout(() => {\n    let position = 0;\n    createPromise(position, delay); //стільки разів, скільки ввели в поле amount.\n  }, firstDelay);\n}\n\nfunction onFormInput(evt) {}\n\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)); // Fulfill (position, delay)\n      } else {\n        reject(console.log(`❌ Rejected promise ${position} in ${delay}ms`)); // Reject\n      }\n    }, 2000);\n  });\n}\n"]}